XAML:

<UserControl x:Class="ExampleControlBing.ControlDemos.LayerPanelAccordionExample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:m="clr-namespace:Microsoft.Maps.MapControl;assembly=Microsoft.Maps.MapControl" 
    xmlns:lp="clr-namespace:DeepEarth.BingMapsToolkit.Client.Controls;assembly=DeepEarth.BingMapsToolkit.Client.Controls.LayerPanel">
    <Grid x:Name="LayoutRoot">
        <m:Map x:Name="map" CredentialsProvider="{StaticResource MyCredentials}" />
        <lp:AccordionLayerPanel Name="layerPanel" MapName="map" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="4,4,4,4"/>
    </Grid>
</UserControl>

CS:

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using DeepEarth.BingMapsToolkit.Client.Common.Entities;
using DeepEarth.BingMapsToolkit.Client.Controls;
using DeepEarth.BingMapsToolkit.Client.MapGeometry;
using DeepEarth.BingMapsToolkit.Common.Entities;
using Point=GisSharpBlog.NetTopologySuite.Geometries.Point;

namespace ExampleControlBing.ControlDemos
{
    public partial class LayerPanelAccordionExample
    {
        public LayerPanelAccordionExample()
        {
            InitializeComponent();
            Loaded += LayerPanelExample_Loaded;
        }

        private void LayerPanelExample_Loaded(object sender, RoutedEventArgs e)
        {

            var styles = new Dictionary<string, StyleSpecification>();
            styles.Add("defaultstyle", new StyleSpecification
            {
                ID = "style 1",
                LineColour = "FF1B0AA5",
                LineWidth = 2,
                PolyFillColour = "88677E1E",
                ShowFill = true,
                ShowLine = true,
                IconURL = "http://soulsolutions.com.au/Images/pin.png",
                IconScale = 2
            });

            var layers = new List<LayerDefinition>();
            layers.Add(new LayerDefinition
            {
                CurrentVersion = DateTime.Now,
                IsEditable = false,
                LabelOn = true,
                LayerAlias = "Sample Layer",
                LayerID = "1",
                LayerStyleName = "style 3",
                LayerTimeout = -1,
                LayerType = 1,
                MaxDisplayLevel = 100,
                MBR = new byte[0],
                MinDisplayLevel = 1,
                PermissionToEdit = false,
                Selected = true,
                Tags = "Test Group",
                ZIndex = 30,
                Temporal = true,
                IconURI = "http://soulsolutions.com.au/Images/pin.png",
                ObjectAttributes = new Dictionary<int, LayerObjectAttributeDefinition>()
            });

            layerPanel.Styles = styles;
            layerPanel.EnableBalloon = true;

            layerPanel.LoadLayer += layerPanel_LoadLayer;
            layerPanel.BalloonLaunch += layerPanel_BalloonLaunch;

            layerPanel.Layers = layers;
        }

        private void layerPanel_BalloonLaunch(object sender, BalloonEventArgs args)
        {
            //get ballon data for item
            var grid = new Grid();
            grid.Width = 300;
            grid.Height = 200;
            ((InfoGeometry)sender).BalloonData.Add(grid);
        }

        private void layerPanel_LoadLayer(object sender, LoadLayerEventArgs args,
                                          Action<ObservableCollection<VectorLayerData>, LayerDefinition> callback)
        {
            //get layer data for layer
            var data = new ObservableCollection<VectorLayerData>();
            for (double x = -50; x <= 50; x += 1)
            {
                var point = new Point(x, x);
                data.Add(new VectorLayerData
                             {
                                 Geo = point.AsBinary(),
                                 ID = x.ToString(),
                                 Label = x.ToString(),
                                 //TimeStamp = DateTime.Now.AddHours(x),
                             });
            }

            callback(data, args.Layer);
        }
    }
}
