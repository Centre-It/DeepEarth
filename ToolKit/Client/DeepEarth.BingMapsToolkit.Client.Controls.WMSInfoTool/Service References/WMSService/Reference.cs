//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace DeepEarth.BingMapsToolkit.Client.Controls.WMSService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WMSService.WMSService")]
    public interface WMSService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/WMSService/WMSFeatureRequest", ReplyAction="http://tempuri.org/WMSService/WMSFeatureRequestResponse")]
        System.IAsyncResult BeginWMSFeatureRequest(double minx, double maxx, double miny, double maxy, double x, double y, double width, double height, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndWMSFeatureRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WMSServiceChannel : DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WMSFeatureRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WMSFeatureRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WMSServiceClient : System.ServiceModel.ClientBase<DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService>, DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService {
        
        private BeginOperationDelegate onBeginWMSFeatureRequestDelegate;
        
        private EndOperationDelegate onEndWMSFeatureRequestDelegate;
        
        private System.Threading.SendOrPostCallback onWMSFeatureRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WMSServiceClient() {
        }
        
        public WMSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WMSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<WMSFeatureRequestCompletedEventArgs> WMSFeatureRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService.BeginWMSFeatureRequest(double minx, double maxx, double miny, double maxy, double x, double y, double width, double height, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWMSFeatureRequest(minx, maxx, miny, maxy, x, y, width, height, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService.EndWMSFeatureRequest(System.IAsyncResult result) {
            return base.Channel.EndWMSFeatureRequest(result);
        }
        
        private System.IAsyncResult OnBeginWMSFeatureRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double minx = ((double)(inValues[0]));
            double maxx = ((double)(inValues[1]));
            double miny = ((double)(inValues[2]));
            double maxy = ((double)(inValues[3]));
            double x = ((double)(inValues[4]));
            double y = ((double)(inValues[5]));
            double width = ((double)(inValues[6]));
            double height = ((double)(inValues[7]));
            return ((DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService)(this)).BeginWMSFeatureRequest(minx, maxx, miny, maxy, x, y, width, height, callback, asyncState);
        }
        
        private object[] OnEndWMSFeatureRequest(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> retVal = ((DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService)(this)).EndWMSFeatureRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWMSFeatureRequestCompleted(object state) {
            if ((this.WMSFeatureRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WMSFeatureRequestCompleted(this, new WMSFeatureRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WMSFeatureRequestAsync(double minx, double maxx, double miny, double maxy, double x, double y, double width, double height) {
            this.WMSFeatureRequestAsync(minx, maxx, miny, maxy, x, y, width, height, null);
        }
        
        public void WMSFeatureRequestAsync(double minx, double maxx, double miny, double maxy, double x, double y, double width, double height, object userState) {
            if ((this.onBeginWMSFeatureRequestDelegate == null)) {
                this.onBeginWMSFeatureRequestDelegate = new BeginOperationDelegate(this.OnBeginWMSFeatureRequest);
            }
            if ((this.onEndWMSFeatureRequestDelegate == null)) {
                this.onEndWMSFeatureRequestDelegate = new EndOperationDelegate(this.OnEndWMSFeatureRequest);
            }
            if ((this.onWMSFeatureRequestCompletedDelegate == null)) {
                this.onWMSFeatureRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWMSFeatureRequestCompleted);
            }
            base.InvokeAsync(this.onBeginWMSFeatureRequestDelegate, new object[] {
                        minx,
                        maxx,
                        miny,
                        maxy,
                        x,
                        y,
                        width,
                        height}, this.onEndWMSFeatureRequestDelegate, this.onWMSFeatureRequestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService CreateChannel() {
            return new WMSServiceClientChannel(this);
        }
        
        private class WMSServiceClientChannel : ChannelBase<DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService>, DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService {
            
            public WMSServiceClientChannel(System.ServiceModel.ClientBase<DeepEarth.BingMapsToolkit.Client.Controls.WMSService.WMSService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginWMSFeatureRequest(double minx, double maxx, double miny, double maxy, double x, double y, double width, double height, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = minx;
                _args[1] = maxx;
                _args[2] = miny;
                _args[3] = maxy;
                _args[4] = x;
                _args[5] = y;
                _args[6] = width;
                _args[7] = height;
                System.IAsyncResult _result = base.BeginInvoke("WMSFeatureRequest", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndWMSFeatureRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> _result = ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(base.EndInvoke("WMSFeatureRequest", _args, result)));
                return _result;
            }
        }
    }
}
